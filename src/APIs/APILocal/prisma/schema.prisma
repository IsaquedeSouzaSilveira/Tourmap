generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
}

model User_Admin {
  id String @id @default(uuid())
  name String 
  email String @unique 
  password String
}

model User_Client {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String

  commentsByEmail Comment[] @relation("commentsByEmail")
  commentsById Comment[] @relation("commentsById")

  avaliationsByEmail Avaliation[] @relation("avaliationsByEmail")
  avaliationsById Avaliation[] @relation("avaliationsById")

  travelRoadMaps Travel_Road_Map[]
}


model User_Business {
  id String @id @default(uuid())
  CNPJ String @unique
  name String
  email String @unique
  telefone String @unique
  password String

  pontosComerciais Ponto_Comercial[]
}

model Ponto_Comercial {
  id String @id @default(uuid())
  name String
  description String
  local String @unique
  creationDate DateTime @db.Date

  businessId String
  User_Business User_Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  Travel_Road_Map Travel_Road_Map[]

}


model Ponto_Turistico {
  id String @id @default(uuid())
  name String
  description String
  creationDate DateTime @db.Date
  reportNumber Int @default(0)
  local String @unique 

  Travel_Road_Map Travel_Road_Map[]
}

model Travel_Road_Map {
  id String @id @default(uuid())
  title String
  dataPublication DateTime? @db.Date
  description String
  idCreator String
  avaliationValue Int @default(0)
  isPublished Boolean @default(false)

  userClient User_Client @relation( fields: [idCreator], references: [id], onDelete: Cascade)

  Commercial_Point Ponto_Comercial[]
  Touristing_Point Ponto_Turistico[]

  Comments Comment[] 
  Avaliations Avaliation[] 
  
}

model Comment {
  id String   @id @default(uuid())
  dataPublication DateTime @db.Date
  content String

  userEmail String
  idCreator String
  idTravelRoadMap String

  userClientByEmail User_Client @relation("commentsByEmail", fields: [userEmail], references: [email], onDelete: Cascade)
  userClientById User_Client @relation("commentsById", fields: [idCreator], references: [id], onDelete: Cascade)
  userClientByTravelRoadMap Travel_Road_Map @relation(fields: [idTravelRoadMap], references: [id], onDelete: Cascade)
}

model Avaliation {
  id String @id @default(uuid()) 
  dataPublication DateTime @db.Date
  avaliation Int

  userEmail String
  idCreator String
  idTravelRoadMap String

  userClientByEmail User_Client @relation("avaliationsByEmail", fields: [userEmail], references: [email], onDelete: Cascade)
  userClientById User_Client @relation("avaliationsById", fields: [idCreator], references: [id], onDelete: Cascade)
  userClientByTravelRoadMap Travel_Road_Map @relation(fields: [idTravelRoadMap], references: [id], onDelete: Cascade)
}